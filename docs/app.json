[{"name": "app.py", "content": "import os\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom shiny import App, render, ui, reactive\n\nplt.rcParams.update({\n    'figure.figsize': [15, 10],\n})\n\napp_ui = ui.page_fluid(\n    ui.input_selectize(\n        id='solver',\n        label='L\u00f6sungsmethode',\n        choices=[\n            'Euler Vorw\u00e4rts',\n            'Euler R\u00fcckw\u00e4rts',\n            'Trapezverfahren'\n        ],\n        selected='Euler Vorw\u00e4rts'\n    ),\n    ui.input_slider(\n        id=\"dx\",\n        label=\"dx\",\n        min=.1,\n        max=2,\n        value=.5,\n        step=.1,\n        ),\n    ui.input_slider(\n        id=\"x0\",\n        label=\"x0\",\n        min=0,\n        max=10,\n        value=.5,\n        step=.1,\n        ),\n    ui.output_plot(\n        id='plot',\n        width='1066px',\n        height='600px',\n    )\n)\n\n\ndef server(input, output, session):\n\n    y_true = lambda xx: np.sin(xx) / np.exp(.2*xx)\n    y_prime = lambda xx: (np.cos(xx) - .2*np.sin(xx)) / np.exp(.2*xx)\n    x_cont = np.linspace(0, 5*np.pi, 1000)\n\n    solver = {\n        'Euler Vorw\u00e4rts': lambda yy, xx, dx: yy + y_prime(xx)*dx,\n        'Euler R\u00fcckw\u00e4rts': lambda yy, xx, dx: yy + y_prime(xx+dx)*dx,\n        'Trapezverfahren': lambda yy, xx, dx: yy + dx/2*(y_prime(xx) + y_prime(xx+dx)),\n    }\n\n    @reactive.Calc\n    def solve():\n        dx=input.dx()\n        x_dis = np.arange(input.x0(), x_cont[-1], dx)\n        est = [y_true(input.x0())]\n        for xx in x_dis[:-1]:\n            est.append(\n                solver[input.solver()](est[-1], xx, dx))\n        return x_dis, est\n\n    @output\n    @render.plot()\n    def plot():\n        x_dis, y_euler = solve()\n\n        plt.figure(figsize=(8, 4))\n\n        plt.hlines(0, x_cont[0], x_cont[-1], color='k', ls=':')\n        plt.plot(x_cont, y_true(x_cont), ls='--', color='b', label='y(t)')\n        plt.plot(x_dis, y_euler, marker='s', color='k', label='phi_n')\n        plt.plot(x_dis[0], y_euler[0], marker='s', color='b', ls='none', label='y(t_0)=phi_0')\n        plt.xlabel('t')\n        plt.xlim(x_cont[0], x_cont[-1])\n        plt.ylabel('y (t)')\n        if np.max(np.abs(y_euler)) < 1.1:\n            plt.ylim(-1, 1)\n        else:\n            plt.ylim(-2, 2)\n        plt.title('N\u00e4herung von y(t) durch {}'.format(\n            input.solver()\n        ))\n        plt.legend()\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "app.py~", "content": "import os\nimport numpy as np\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom shiny import App, render, ui, reactive\n\nplt.rcParams.update({\n    'text.usetex': True,\n    'figure.figsize': [15, 10],\n})\n\napp_ui = ui.page_fluid(\n    ui.h2(\"Hello Shiny!\"),\n    ui.input_selectize(\n        id='solver',\n        label='L\u00f6sungsmethode',\n        choices=[\n            'Euler Vorw\u00e4rts',\n            'Euler R\u00fcckw\u00e4rts',\n            'Trapezverfahren'\n        ],\n        selected='Euler Vorw\u00e4rts'\n    ),\n    ui.input_slider(\n        id=\"dx\",\n        label=\"dx\",\n        min=.1, \n        max=2,\n        value=.5,\n        step=.1,\n        ),\n    ui.input_slider(\n        id=\"x0\",\n        label=\"x0\",\n        min=0, \n        max=10,\n        value=.5,\n        step=.1,\n        ),\n    ui.output_plot(\"plot\"),\n)\n\n\ndef server(input, output, session):\n    \n    y_true = lambda xx: np.sin(xx) / np.exp(.2*xx)\n    y_prime = lambda xx: (np.cos(xx) - .2*np.sin(xx)) / np.exp(.2*xx)\n    x_cont = np.linspace(0, 5*np.pi, 1000)\n    \n    solver = {\n        'Euler Vorw\u00e4rts': lambda yy, xx, dx: yy + y_prime(xx)*dx,\n        'Euler R\u00fcckw\u00e4rts': lambda yy, xx, dx: yy + y_prime(xx+dx)*dx,\n        'Trapezverfahren': lambda yy, xx, dx: yy + dx/2*(y_prime(xx) + y_prime(xx+dx)),\n    } \n    \n    @reactive.Calc\n    def solve():  \n        dx=input.dx()     \n        x_dis = np.arange(input.x0(), x_cont[-1], dx)\n        est = [y_true(input.x0())]\n        for xx in x_dis[:-1]:\n            est.append(\n                solver[input.solver()](est[-1], xx, dx))\n        return x_dis, est\n    \n    @output\n    @render.plot()\n    def plot():\n        x_dis, y_euler = solve()  \n        \n        plt.figure(figsize=(8, 4))\n        \n        plt.hlines(0, x_cont[0], x_cont[-1], color='k', ls=':')\n        plt.plot(x_cont, y_true(x_cont), ls='--', color='b', label='$y(t)$')\n        plt.plot(x_dis, y_euler, marker='s', color='k', label='$\\\\Phi_n$')\n        plt.plot(x_dis[0], y_euler[0], marker='s', color='b', ls='none', label='$y(t_0)=\\\\Phi_0$')\n        plt.xlabel('$t$')\n        plt.xlim(x_cont[0], x_cont[-1])\n        plt.ylabel('$y (t)$')\n        if np.max(np.abs(y_euler)) < 1.1:\n            plt.ylim(-1, 1)\n        else: \n            plt.ylim(-2, 2)\n        plt.title('N\u00e4herung von $y(t)$ durch {}'.format(\n            input.solver()\n        ))\n        plt.legend()   \n    \napp = App(app_ui, server)\n", "type": "text"}, {"name": "rsconnect-python/shiny.json", "content": "{\n    \"https://api.shinyapps.io\": {\n        \"server_url\": \"https://api.shinyapps.io\",\n        \"filename\": \"/home/lukas/Code/shiny\",\n        \"app_url\": \"https://lukasbrunner.shinyapps.io/shiny/\",\n        \"app_id\": 8792010,\n        \"app_guid\": null,\n        \"title\": \"shiny\",\n        \"app_mode\": \"python-shiny\"\n    }\n}", "type": "text"}]